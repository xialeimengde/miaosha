// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: miaosha.proto

#include "miaosha.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace miaosha {
class MiaoshaRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MiaoshaRequest> _instance;
} _MiaoshaRequest_default_instance_;
class MiaoshaResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MiaoshaResponse> _instance;
} _MiaoshaResponse_default_instance_;
}  // namespace miaosha
static void InitDefaultsMiaoshaRequest_miaosha_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::miaosha::_MiaoshaRequest_default_instance_;
    new (ptr) ::miaosha::MiaoshaRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::miaosha::MiaoshaRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MiaoshaRequest_miaosha_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMiaoshaRequest_miaosha_2eproto}, {}};

static void InitDefaultsMiaoshaResponse_miaosha_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::miaosha::_MiaoshaResponse_default_instance_;
    new (ptr) ::miaosha::MiaoshaResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::miaosha::MiaoshaResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MiaoshaResponse_miaosha_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMiaoshaResponse_miaosha_2eproto}, {}};

void InitDefaults_miaosha_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_MiaoshaRequest_miaosha_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MiaoshaResponse_miaosha_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_miaosha_2eproto[2];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_miaosha_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_miaosha_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_miaosha_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::miaosha::MiaoshaRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::miaosha::MiaoshaRequest, user_openid_),
  PROTOBUF_FIELD_OFFSET(::miaosha::MiaoshaRequest, user_session_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::miaosha::MiaoshaResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::miaosha::MiaoshaResponse, result_),
  PROTOBUF_FIELD_OFFSET(::miaosha::MiaoshaResponse, ret_msg_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::miaosha::MiaoshaRequest)},
  { 7, -1, sizeof(::miaosha::MiaoshaResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::miaosha::_MiaoshaRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::miaosha::_MiaoshaResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_miaosha_2eproto = {
  {}, AddDescriptors_miaosha_2eproto, "miaosha.proto", schemas,
  file_default_instances, TableStruct_miaosha_2eproto::offsets,
  file_level_metadata_miaosha_2eproto, 2, file_level_enum_descriptors_miaosha_2eproto, file_level_service_descriptors_miaosha_2eproto,
};

const char descriptor_table_protodef_miaosha_2eproto[] =
  "\n\rmiaosha.proto\022\007miaosha\";\n\016MiaoshaReque"
  "st\022\023\n\013user_openid\030\001 \001(\t\022\024\n\014user_session\030"
  "\002 \001(\t\"2\n\017MiaoshaResponse\022\016\n\006result\030\001 \001(\t"
  "\022\017\n\007ret_msg\030\002 \001(\t2N\n\016MiaoshaService\022<\n\007m"
  "iaosha\022\027.miaosha.MiaoshaRequest\032\030.miaosh"
  "a.MiaoshaResponseb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_miaosha_2eproto = {
  false, InitDefaults_miaosha_2eproto, 
  descriptor_table_protodef_miaosha_2eproto,
  "miaosha.proto", &assign_descriptors_table_miaosha_2eproto, 225,
};

void AddDescriptors_miaosha_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_miaosha_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_miaosha_2eproto = []() { AddDescriptors_miaosha_2eproto(); return true; }();
namespace miaosha {

// ===================================================================

void MiaoshaRequest::InitAsDefaultInstance() {
}
class MiaoshaRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MiaoshaRequest::kUserOpenidFieldNumber;
const int MiaoshaRequest::kUserSessionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MiaoshaRequest::MiaoshaRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:miaosha.MiaoshaRequest)
}
MiaoshaRequest::MiaoshaRequest(const MiaoshaRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_openid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_openid().size() > 0) {
    user_openid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_openid_);
  }
  user_session_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_session().size() > 0) {
    user_session_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_session_);
  }
  // @@protoc_insertion_point(copy_constructor:miaosha.MiaoshaRequest)
}

void MiaoshaRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MiaoshaRequest_miaosha_2eproto.base);
  user_openid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_session_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MiaoshaRequest::~MiaoshaRequest() {
  // @@protoc_insertion_point(destructor:miaosha.MiaoshaRequest)
  SharedDtor();
}

void MiaoshaRequest::SharedDtor() {
  user_openid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_session_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MiaoshaRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MiaoshaRequest& MiaoshaRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MiaoshaRequest_miaosha_2eproto.base);
  return *internal_default_instance();
}


void MiaoshaRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:miaosha.MiaoshaRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_openid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_session_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MiaoshaRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MiaoshaRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string user_openid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("miaosha.MiaoshaRequest.user_openid");
        object = msg->mutable_user_openid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string user_session = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("miaosha.MiaoshaRequest.user_session");
        object = msg->mutable_user_session();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MiaoshaRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:miaosha.MiaoshaRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string user_openid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_openid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_openid().data(), static_cast<int>(this->user_openid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "miaosha.MiaoshaRequest.user_openid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_session = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_session()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_session().data(), static_cast<int>(this->user_session().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "miaosha.MiaoshaRequest.user_session"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:miaosha.MiaoshaRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:miaosha.MiaoshaRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MiaoshaRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:miaosha.MiaoshaRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_openid = 1;
  if (this->user_openid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_openid().data(), static_cast<int>(this->user_openid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "miaosha.MiaoshaRequest.user_openid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_openid(), output);
  }

  // string user_session = 2;
  if (this->user_session().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_session().data(), static_cast<int>(this->user_session().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "miaosha.MiaoshaRequest.user_session");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_session(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:miaosha.MiaoshaRequest)
}

::google::protobuf::uint8* MiaoshaRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:miaosha.MiaoshaRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_openid = 1;
  if (this->user_openid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_openid().data(), static_cast<int>(this->user_openid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "miaosha.MiaoshaRequest.user_openid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_openid(), target);
  }

  // string user_session = 2;
  if (this->user_session().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_session().data(), static_cast<int>(this->user_session().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "miaosha.MiaoshaRequest.user_session");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_session(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:miaosha.MiaoshaRequest)
  return target;
}

size_t MiaoshaRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:miaosha.MiaoshaRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_openid = 1;
  if (this->user_openid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_openid());
  }

  // string user_session = 2;
  if (this->user_session().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_session());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MiaoshaRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:miaosha.MiaoshaRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MiaoshaRequest* source =
      ::google::protobuf::DynamicCastToGenerated<MiaoshaRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:miaosha.MiaoshaRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:miaosha.MiaoshaRequest)
    MergeFrom(*source);
  }
}

void MiaoshaRequest::MergeFrom(const MiaoshaRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:miaosha.MiaoshaRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_openid().size() > 0) {

    user_openid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_openid_);
  }
  if (from.user_session().size() > 0) {

    user_session_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_session_);
  }
}

void MiaoshaRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:miaosha.MiaoshaRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MiaoshaRequest::CopyFrom(const MiaoshaRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:miaosha.MiaoshaRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MiaoshaRequest::IsInitialized() const {
  return true;
}

void MiaoshaRequest::Swap(MiaoshaRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MiaoshaRequest::InternalSwap(MiaoshaRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  user_openid_.Swap(&other->user_openid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_session_.Swap(&other->user_session_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata MiaoshaRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_miaosha_2eproto);
  return ::file_level_metadata_miaosha_2eproto[kIndexInFileMessages];
}


// ===================================================================

void MiaoshaResponse::InitAsDefaultInstance() {
}
class MiaoshaResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MiaoshaResponse::kResultFieldNumber;
const int MiaoshaResponse::kRetMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MiaoshaResponse::MiaoshaResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:miaosha.MiaoshaResponse)
}
MiaoshaResponse::MiaoshaResponse(const MiaoshaResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.result().size() > 0) {
    result_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
  ret_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ret_msg().size() > 0) {
    ret_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_msg_);
  }
  // @@protoc_insertion_point(copy_constructor:miaosha.MiaoshaResponse)
}

void MiaoshaResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MiaoshaResponse_miaosha_2eproto.base);
  result_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MiaoshaResponse::~MiaoshaResponse() {
  // @@protoc_insertion_point(destructor:miaosha.MiaoshaResponse)
  SharedDtor();
}

void MiaoshaResponse::SharedDtor() {
  result_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MiaoshaResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MiaoshaResponse& MiaoshaResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MiaoshaResponse_miaosha_2eproto.base);
  return *internal_default_instance();
}


void MiaoshaResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:miaosha.MiaoshaResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MiaoshaResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MiaoshaResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string result = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("miaosha.MiaoshaResponse.result");
        object = msg->mutable_result();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string ret_msg = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("miaosha.MiaoshaResponse.ret_msg");
        object = msg->mutable_ret_msg();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MiaoshaResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:miaosha.MiaoshaResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->result().data(), static_cast<int>(this->result().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "miaosha.MiaoshaResponse.result"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ret_msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ret_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ret_msg().data(), static_cast<int>(this->ret_msg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "miaosha.MiaoshaResponse.ret_msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:miaosha.MiaoshaResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:miaosha.MiaoshaResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MiaoshaResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:miaosha.MiaoshaResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string result = 1;
  if (this->result().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->result().data(), static_cast<int>(this->result().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "miaosha.MiaoshaResponse.result");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->result(), output);
  }

  // string ret_msg = 2;
  if (this->ret_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ret_msg().data(), static_cast<int>(this->ret_msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "miaosha.MiaoshaResponse.ret_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ret_msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:miaosha.MiaoshaResponse)
}

::google::protobuf::uint8* MiaoshaResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:miaosha.MiaoshaResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string result = 1;
  if (this->result().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->result().data(), static_cast<int>(this->result().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "miaosha.MiaoshaResponse.result");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->result(), target);
  }

  // string ret_msg = 2;
  if (this->ret_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ret_msg().data(), static_cast<int>(this->ret_msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "miaosha.MiaoshaResponse.ret_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ret_msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:miaosha.MiaoshaResponse)
  return target;
}

size_t MiaoshaResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:miaosha.MiaoshaResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result = 1;
  if (this->result().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->result());
  }

  // string ret_msg = 2;
  if (this->ret_msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ret_msg());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MiaoshaResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:miaosha.MiaoshaResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MiaoshaResponse* source =
      ::google::protobuf::DynamicCastToGenerated<MiaoshaResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:miaosha.MiaoshaResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:miaosha.MiaoshaResponse)
    MergeFrom(*source);
  }
}

void MiaoshaResponse::MergeFrom(const MiaoshaResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:miaosha.MiaoshaResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result().size() > 0) {

    result_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
  if (from.ret_msg().size() > 0) {

    ret_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_msg_);
  }
}

void MiaoshaResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:miaosha.MiaoshaResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MiaoshaResponse::CopyFrom(const MiaoshaResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:miaosha.MiaoshaResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MiaoshaResponse::IsInitialized() const {
  return true;
}

void MiaoshaResponse::Swap(MiaoshaResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MiaoshaResponse::InternalSwap(MiaoshaResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  result_.Swap(&other->result_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ret_msg_.Swap(&other->ret_msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata MiaoshaResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_miaosha_2eproto);
  return ::file_level_metadata_miaosha_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace miaosha
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::miaosha::MiaoshaRequest* Arena::CreateMaybeMessage< ::miaosha::MiaoshaRequest >(Arena* arena) {
  return Arena::CreateInternal< ::miaosha::MiaoshaRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::miaosha::MiaoshaResponse* Arena::CreateMaybeMessage< ::miaosha::MiaoshaResponse >(Arena* arena) {
  return Arena::CreateInternal< ::miaosha::MiaoshaResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
